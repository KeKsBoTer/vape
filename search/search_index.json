{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install vape4d\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Viewer (jupyter notebook) <pre><code>from vape4d import viewer\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nviewer(\n    #[T,C,D,W,H]\n    np.random.rand(1,1,32,32,32),\n    plt.get_cmap(\"viridis\"),   \n)\n</code></pre></p> <p>Render Image <pre><code>import numpy as np\nfrom vape4d import diverging_alpha, render\nimport matplotlib.pyplot as plt\n\ncolormap = diverging_alpha(plt.get_cmap(\"magma\"))\nimg = render(\n        # [T,D,H,W]\n        np.random.rand(2,32,32,32).astype(np.float32),\n        colormap,\n        0.5, # timestep\n        width=1024,\n        height=1024,\n    )\n\nplt.imshow(img)\nplt.axis(\"off\")\n\nplt.savefig(\"test.png\", bbox_inches=\"tight\", pad_inches=0)\nplt.show()\n</code></pre></p>"},{"location":"api/render/","title":"Render","text":""},{"location":"api/render/#vape4d.render","title":"vape4d.render","text":""},{"location":"api/render/#vape4d.render.render","title":"render","text":"<pre><code>render(\n    volume: np.ndarray,\n    cmap: Colormap,\n    time: Union[float, list[float]],\n    width: int = 1024,\n    height: int = 1024,\n    background: tuple[float, float, float, float] = (\n        0,\n        0,\n        0,\n        1,\n    ),\n    vmin: Optional[float] = None,\n    vmax: Optional[float] = None,\n    distance_scale: float = 1.0,\n    spatial_interpolation: str = \"linear\",\n    temporal_interpolation: str = \"linear\",\n) -&gt; np.ndarray\n</code></pre> <p>renders a single or multiple images of a volume</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>ndarray</code> <p>volume data of shape [N, H, W, D]</p> required <code>cmap</code> <code>Colormap</code> <p>colormap to use for rendering</p> required <code>time</code> <code>Union[float, list[float]]</code> <p>if a single value is given, a single image is rendered at that time. If a list of values is given, a video is rendered with the given times.</p> required <code>width</code> <code>int</code> <p>image width. Defaults to 1024.</p> <code>1024</code> <code>height</code> <code>int</code> <p>image height. Defaults to 1024.</p> <code>1024</code> <code>background</code> <code>tuple[float, float, float, float]</code> <p>background color. Defaults to (0, 0, 0, 1).</p> <code>(0, 0, 0, 1)</code> <code>vmin</code> <code>Optional[float]</code> <p>minimum value for colormap. defaults to minimum value in volume.</p> <code>None</code> <code>vmax</code> <code>Optional[float]</code> <p>maximum value for colormap. defaults to maximum value in volume.</p> <code>None</code> <code>distance_scale</code> <code>float</code> <p>distance scale for rendering. A larger value makes everything more opaque. Defaults to 1.0.</p> <code>1.0</code> <code>spatial_interpolation</code> <code>str</code> <p>interpolation in space. Linear or Nearest. Defaults to \"linear\".</p> <code>'linear'</code> <code>temporal_interpolation</code> <code>str</code> <p>interpolation in time. Linear or Nearest. Defaults to \"linear\".</p> <code>'linear'</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: [T, H, W, 4] if time is a list, [H, W, 4] if time is a single value</p> Source code in <code>vape4d/render.py</code> <pre><code>def render(\n    volume: np.ndarray,\n    cmap: Colormap,\n    time: Union[float, list[float]],\n    width: int = 1024,\n    height: int = 1024,\n    background: tuple[float, float, float, float] = (0, 0, 0, 1),\n    vmin: Optional[float] = None,\n    vmax: Optional[float] = None,\n    distance_scale: float = 1.0,\n    spatial_interpolation: str = \"linear\",\n    temporal_interpolation: str = \"linear\",\n) -&gt; np.ndarray:\n    \"\"\"renders a single or multiple images of a volume\n\n    Args:\n        volume (np.ndarray): volume data of shape [N, H, W, D]\n        cmap (Colormap): colormap to use for rendering\n        time (Union[float, list[float]]): if a single value is given, a single image is rendered at that time. If a list of values is given, a video is rendered with the given times.\n        width (int, optional): image width. Defaults to 1024.\n        height (int, optional): image height. Defaults to 1024.\n        background (tuple[float, float, float, float], optional): background color. Defaults to (0, 0, 0, 1).\n        vmin (Optional[float], optional): minimum value for colormap. defaults to minimum value in volume.\n        vmax (Optional[float], optional): maximum value for colormap. defaults to maximum value in volume.\n        distance_scale (float, optional): distance scale for rendering. A larger value makes everything more opaque. Defaults to 1.0.\n        spatial_interpolation (str, optional): interpolation in space. Linear or Nearest. Defaults to \"linear\".\n        temporal_interpolation (str, optional): interpolation in time. Linear or Nearest. Defaults to \"linear\".\n\n    Returns:\n        np.ndarray: [T, H, W, 4] if time is a list, [H, W, 4] if time is a single value\n    \"\"\"\n    colormap_data = cmap(np.linspace(0, 1, 256)).astype(np.float32)\n    if isinstance(time, list):\n        img = vape4d.render_video(\n            volume,\n            colormap_data,\n            width,\n            height,\n            time,\n            background,\n            distance_scale,\n            vmin,\n            vmax,\n            spatial_interpolation,\n            temporal_interpolation,\n        )\n        return img\n    else:\n        img = vape4d.render_img(\n            volume,\n            colormap_data,\n            width,\n            height,\n            time,\n            background,\n            distance_scale,\n            vmin,\n            vmax,\n            spatial_interpolation,\n            temporal_interpolation,\n        )\n        return img\n</code></pre>"},{"location":"api/utils/","title":"Utilities","text":""},{"location":"api/utils/#vape4d.diverging_alpha","title":"vape4d.diverging_alpha","text":"<pre><code>diverging_alpha(cmap: Colormap) -&gt; Colormap\n</code></pre> <p>changes the alpha channel of a colormap to be diverging (0-&gt;1, 0.5 &gt; 0, 1-&gt;1)</p> <p>Parameters:</p> Name Type Description Default <code>cmap</code> <code>Colormap</code> <p>colormap</p> required <p>Returns:</p> Name Type Description <code>Colormap</code> <code>Colormap</code> <p>new colormap</p> Source code in <code>vape4d/utils.py</code> <pre><code>def diverging_alpha(cmap: Colormap) -&gt; Colormap:\n    \"\"\"changes the alpha channel of a colormap to be diverging (0-&gt;1, 0.5 &gt; 0, 1-&gt;1)\n\n    Args:\n        cmap (Colormap): colormap\n\n    Returns:\n        Colormap: new colormap\n    \"\"\"\n    cmap = cmap.copy()\n    if isinstance(cmap, ListedColormap):\n        cmap.colors = deepcopy(cmap.colors)\n        for i, a in enumerate(cmap.colors):\n            a.append(2 * abs(i / cmap.N - 0.5))\n    elif isinstance(cmap, LinearSegmentedColormap):\n        cmap._segmentdata[\"alpha\"] = np.array(\n            [[0.0, 1.0, 1.0], [0.5, 0.0, 0.0], [1.0, 1.0, 1.0]]\n        )\n    else:\n        raise TypeError(\n            \"cmap must be either a ListedColormap or a LinearSegmentedColormap\"\n        )\n    return cmap\n</code></pre>"},{"location":"api/viewer/","title":"Viewer","text":""},{"location":"api/viewer/#vape4d.viewer","title":"vape4d.viewer","text":""},{"location":"api/viewer/#vape4d.viewer.VAPE_URL","title":"VAPE_URL  <code>module-attribute</code>","text":"<pre><code>VAPE_URL = get(\n    \"VAPE_URL\", \"https://keksboter.github.io/vape4d\"\n)\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings","title":"ViewerSettings  <code>dataclass</code>","text":"Source code in <code>vape4d/viewer.py</code> <pre><code>@dataclass(unsafe_hash=True)\nclass ViewerSettings:\n    width: int\n    height: int\n    background_color: tuple\n    show_colormap_editor: bool\n    show_volume_info: bool\n    vmin: Optional[float]\n    vmax: Optional[float]\n    distance_scale: float\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: tuple\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.show_colormap_editor","title":"show_colormap_editor  <code>instance-attribute</code>","text":"<pre><code>show_colormap_editor: bool\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.show_volume_info","title":"show_volume_info  <code>instance-attribute</code>","text":"<pre><code>show_volume_info: bool\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.vmin","title":"vmin  <code>instance-attribute</code>","text":"<pre><code>vmin: Optional[float]\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.vmax","title":"vmax  <code>instance-attribute</code>","text":"<pre><code>vmax: Optional[float]\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.distance_scale","title":"distance_scale  <code>instance-attribute</code>","text":"<pre><code>distance_scale: float\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.ViewerSettings.__init__","title":"__init__","text":"<pre><code>__init__(\n    width: int,\n    height: int,\n    background_color: tuple,\n    show_colormap_editor: bool,\n    show_volume_info: bool,\n    vmin: Optional[float],\n    vmax: Optional[float],\n    distance_scale: float,\n) -&gt; None\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.VolumeViewer","title":"VolumeViewer","text":"<p>               Bases: <code>DisplayObject</code></p> Source code in <code>vape4d/viewer.py</code> <pre><code>class VolumeViewer(DisplayObject):\n    def __init__(self, data: np.ndarray, colormap, settings: ViewerSettings):\n        super(VolumeViewer, self).__init__(\n            data={\"volume\": data, \"cmap\": colormap, \"settings\": settings}\n        )\n\n    def _repr_html_(self):\n\n        data = self.data[\"volume\"]\n        colormap = self.data[\"cmap\"]\n        settings = self.data[\"settings\"]\n        buffer = io.BytesIO()\n        np.save(buffer, data.astype(np.float32))\n        data_code = base64.b64encode(buffer.getvalue())\n\n        buffer2 = io.BytesIO()\n        colormap_data = colormap(np.linspace(0, 1, 256)).astype(np.float32)\n        np.save(buffer2, colormap_data)\n        cmap_code = base64.b64encode(buffer2.getvalue())\n\n        canvas_id = f\"vape4d_canvas_{str(random.randint(0,2**32))}\"\n        html_code = _TEMPLATE_IFRAME.format(\n            canvas_id=canvas_id,\n            data_code=data_code.decode(\"utf-8\"),\n            cmap_code=cmap_code.decode(\"utf-8\"),\n            canvas_width=settings.width,\n            canvas_height=settings.height,\n            settings_json=json.dumps(dataclasses.asdict(settings)),\n            viewer_url=VAPE_URL,\n        )\n        return html_code\n\n    def __html__(self):\n        return self._repr_html_()\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.VolumeViewer.__init__","title":"__init__","text":"<pre><code>__init__(\n    data: np.ndarray, colormap, settings: ViewerSettings\n)\n</code></pre> Source code in <code>vape4d/viewer.py</code> <pre><code>def __init__(self, data: np.ndarray, colormap, settings: ViewerSettings):\n    super(VolumeViewer, self).__init__(\n        data={\"volume\": data, \"cmap\": colormap, \"settings\": settings}\n    )\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.VolumeViewer.__html__","title":"__html__","text":"<pre><code>__html__()\n</code></pre> Source code in <code>vape4d/viewer.py</code> <pre><code>def __html__(self):\n    return self._repr_html_()\n</code></pre>"},{"location":"api/viewer/#vape4d.viewer.viewer","title":"viewer","text":"<pre><code>viewer(\n    data: np.ndarray,\n    colormap,\n    width: int = 800,\n    height: int = 600,\n    background_color=(0.0, 0.0, 0.0, 1.0),\n    show_colormap_editor=False,\n    show_volume_info=False,\n    vmin=None,\n    vmax=None,\n    distance_scale=1.0,\n)\n</code></pre> Source code in <code>vape4d/viewer.py</code> <pre><code>def viewer(\n    data: np.ndarray,\n    colormap,\n    width: int = 800,\n    height: int = 600,\n    background_color=(0.0, 0.0, 0.0, 1.0),\n    show_colormap_editor=False,\n    show_volume_info=False,\n    vmin=None,\n    vmax=None,\n    distance_scale=1.0,\n):\n    return VolumeViewer(\n        data,\n        colormap,\n        ViewerSettings(\n            width,\n            height,\n            background_color,\n            show_colormap_editor,\n            show_volume_info,\n            vmin,\n            vmax,\n            distance_scale,\n        ),\n    )\n</code></pre>"},{"location":"api/viewer/#vape4d.VolumeViewer","title":"vape4d.VolumeViewer","text":"<p>               Bases: <code>DisplayObject</code></p> Source code in <code>vape4d/viewer.py</code> <pre><code>class VolumeViewer(DisplayObject):\n    def __init__(self, data: np.ndarray, colormap, settings: ViewerSettings):\n        super(VolumeViewer, self).__init__(\n            data={\"volume\": data, \"cmap\": colormap, \"settings\": settings}\n        )\n\n    def _repr_html_(self):\n\n        data = self.data[\"volume\"]\n        colormap = self.data[\"cmap\"]\n        settings = self.data[\"settings\"]\n        buffer = io.BytesIO()\n        np.save(buffer, data.astype(np.float32))\n        data_code = base64.b64encode(buffer.getvalue())\n\n        buffer2 = io.BytesIO()\n        colormap_data = colormap(np.linspace(0, 1, 256)).astype(np.float32)\n        np.save(buffer2, colormap_data)\n        cmap_code = base64.b64encode(buffer2.getvalue())\n\n        canvas_id = f\"vape4d_canvas_{str(random.randint(0,2**32))}\"\n        html_code = _TEMPLATE_IFRAME.format(\n            canvas_id=canvas_id,\n            data_code=data_code.decode(\"utf-8\"),\n            cmap_code=cmap_code.decode(\"utf-8\"),\n            canvas_width=settings.width,\n            canvas_height=settings.height,\n            settings_json=json.dumps(dataclasses.asdict(settings)),\n            viewer_url=VAPE_URL,\n        )\n        return html_code\n\n    def __html__(self):\n        return self._repr_html_()\n</code></pre>"},{"location":"api/viewer/#vape4d.VolumeViewer.__init__","title":"__init__","text":"<pre><code>__init__(\n    data: np.ndarray, colormap, settings: ViewerSettings\n)\n</code></pre> Source code in <code>vape4d/viewer.py</code> <pre><code>def __init__(self, data: np.ndarray, colormap, settings: ViewerSettings):\n    super(VolumeViewer, self).__init__(\n        data={\"volume\": data, \"cmap\": colormap, \"settings\": settings}\n    )\n</code></pre>"},{"location":"api/viewer/#vape4d.VolumeViewer.__html__","title":"__html__","text":"<pre><code>__html__()\n</code></pre> Source code in <code>vape4d/viewer.py</code> <pre><code>def __html__(self):\n    return self._repr_html_()\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings","title":"vape4d.ViewerSettings  <code>dataclass</code>","text":"Source code in <code>vape4d/viewer.py</code> <pre><code>@dataclass(unsafe_hash=True)\nclass ViewerSettings:\n    width: int\n    height: int\n    background_color: tuple\n    show_colormap_editor: bool\n    show_volume_info: bool\n    vmin: Optional[float]\n    vmax: Optional[float]\n    distance_scale: float\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.background_color","title":"background_color  <code>instance-attribute</code>","text":"<pre><code>background_color: tuple\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.show_colormap_editor","title":"show_colormap_editor  <code>instance-attribute</code>","text":"<pre><code>show_colormap_editor: bool\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.show_volume_info","title":"show_volume_info  <code>instance-attribute</code>","text":"<pre><code>show_volume_info: bool\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.vmin","title":"vmin  <code>instance-attribute</code>","text":"<pre><code>vmin: Optional[float]\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.vmax","title":"vmax  <code>instance-attribute</code>","text":"<pre><code>vmax: Optional[float]\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.distance_scale","title":"distance_scale  <code>instance-attribute</code>","text":"<pre><code>distance_scale: float\n</code></pre>"},{"location":"api/viewer/#vape4d.ViewerSettings.__init__","title":"__init__","text":"<pre><code>__init__(\n    width: int,\n    height: int,\n    background_color: tuple,\n    show_colormap_editor: bool,\n    show_volume_info: bool,\n    vmin: Optional[float],\n    vmax: Optional[float],\n    distance_scale: float,\n) -&gt; None\n</code></pre>"},{"location":"examples/advection_example/","title":"Advection 3D","text":"<pre><code># Placeholder\n</code></pre>"}]}